import { Button, Label, TextInput } from "flowbite-react";
import { useState } from "react";
import axios from "axios";
import { BookTransaction, BookRentDetails, UserIssuedBooks, IssuedBooksInRange } from "../types/booktransaction";
import backendURL from "../config";

export default function Transactions() {
    const [bookname, setBookname] = useState("")
    const [userid, setUserid] = useState("")
    const [transactionResult, setTransactionResult] = useState<BookTransaction>();
    const [totalRentResult, setTotalRentResult] = useState<BookRentDetails>();
    const [userIssuedBooks, setUserIssuedBooks] = useState<UserIssuedBooks | null>(null);
    const [startDate, setStartDate] = useState("");
    const [endDate, setEndDate] = useState("");
    const [issuedBooksInRange, setIssuedBooksInRange] = useState<IssuedBooksInRange|null>(null);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        const result = await searchTransactionsByBookResponse(bookname);
        setTransactionResult(result);
    };

    const handleTotalRentSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        const result = await totalRentGenerated(bookname);
        setTotalRentResult(result);
    };

    const handleBooksByUseridSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        const result = await booksIssuedByUserid(userid);
        setUserIssuedBooks(result);
    };

    const handleBooksIssuedByDateRangeSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        const result = await booksIssuedByDateRange(startDate,endDate);
        setIssuedBooksInRange(result);
    };
    return (
        <div>
            {/*  Get all transactions for the book */}
        <form className="flex max-w-md flex-col gap-4 ml-[650px]" onSubmit={handleSubmit}>
      <div>
        <div className="mb-2 block items-center">
        <Label htmlFor="transactionHistory">Get Transactional history of a book</Label><br />
          <Label htmlFor="bookName">Name of the book/Search term</Label>
        </div>
        <TextInput  
        id="bookName"
        placeholder="search term (Case sensitive)" 
        required
        value={bookname}
        onChange={(e) => setBookname(e.target.value)} />
      </div>
      <Button type="submit">Search</Button>
    </form>
    {transactionResult && (
        <div className="mt-8 ml-[650px]">
        <h2 className="text-xl font-bold mb-4">Transaction Result:</h2>
        <p><strong>Book Name:</strong> {transactionResult.bookName}</p>
        <p><strong>Total Issuers:</strong> {transactionResult.totalIssuers}</p>
        <p><strong>Current Issuer:</strong> {transactionResult.currentIssuer 
          ? `${transactionResult.currentIssuer.name} (ID: ${transactionResult.currentIssuer.id})` 
          : 'None'}</p>
        <p><strong>Status:</strong> {transactionResult.status}</p>
      </div>
    )
    }
    {/*  Get total rent generated by the book */}
    <form className="flex max-w-md flex-col gap-4 ml-[650px] mt-6" onSubmit={handleTotalRentSubmit }>
        <div>
            <div className="mb-2 block items-center">
            <Label htmlFor="totalRent">Get total rent generated by a book </Label><br />
            <Label htmlFor="bookNameRent">Name of the book</Label>
            </div>
            <TextInput  
            id="bookNameRent"
            placeholder="Enter Exact Name (Case sensitive)" 
            required
            value={bookname}
            onChange={(e) => setBookname(e.target.value)} />
        </div>
        <Button type="submit">Search</Button>
    </form>
    {totalRentResult && (
        <div className="mt-8 ml-[650px]">
            <h2 className="text-xl font-bold mb-4">Total rent generated by book {totalRentResult.bookName} is:</h2>
        <p><strong>Book Name:</strong> {totalRentResult.bookName}</p>
        <p><strong>Total Rent:</strong> {totalRentResult.totalRent?.toString()}</p>
      </div>
    )}
    {/* Get all books issued by the user*/}
    <form className="flex max-w-md flex-col gap-4 ml-[650px] mt-6" onSubmit={handleBooksByUseridSubmit}>
        <div>
            <div className="mb-2 block items-center">
            <Label htmlFor="totalRent">Get all the books issued by a userId </Label><br />
            <Label htmlFor="bookNameRent">UserID</Label>
            </div>
            <TextInput  
            id="userId"
            placeholder="Enter Exact userId (Case sensitive)" 
            required
            value={userid}
            onChange={(e) => setUserid(e.target.value)} />
        </div>
        <Button type="submit">Search</Button>
    </form>
    {userIssuedBooks && (
        <div className="mt-8 ml-[650px]">
            <h2 className="text-xl font-bold mb-4">User Issued Books:</h2>
            <p><strong>User ID:</strong> {userIssuedBooks.userId}</p>
            <p><strong>User Name:</strong> {userIssuedBooks.userName}</p>
            <h3 className="text-lg font-semibold mt-4 mb-2">Issued Books:</h3>
            <ul>
            {userIssuedBooks.issuedBooks.map((book, index) => (
                <li key={index} className="mb-2">
                <strong>{book.bookName}</strong> - Issued on: {new Date(book.issueDate).toLocaleDateString()}
                </li>
            ))}
            </ul>
        </div>
    )}

    {/*Get all books currrently issued and the user ids in the date ranges*/ }
    <form className="flex max-w-md flex-col gap-4 ml-[650px] mt-6" onSubmit={handleBooksIssuedByDateRangeSubmit}>
        <div>
            <div className="mb-2 block items-center">
            <Label htmlFor="totalRent">Get all the books currrently issued and the user ids in the date ranges </Label><br />
            </div>
            <TextInput  className="mb-2"
            id="startdate"
            placeholder="Enter Start date (in this format: 2024-09-01T10:00:00.000+00:00)" 
            required
            value={startDate}
            onChange={(e)=>{setStartDate(e.target.value)}}
            />
            <TextInput  
            id="startdate"
            placeholder="Enter End date (in this format: 2024-09-01T10:00:00.000+00:00)" 
            required
            value={endDate}
            onChange={(e)=>{setEndDate(e.target.value)}}
            />
        </div>
        <Button type="submit">Search</Button>
    </form>
        {issuedBooksInRange && (
    <div className="mt-8 ml-[650px]">
        <h2 className="text-xl font-bold mb-4">Issued Books in Date Range:</h2>
        <p><strong>Start Date:</strong> {new Date(issuedBooksInRange.startDate).toLocaleDateString()}</p>
        <p><strong>End Date:</strong> {new Date(issuedBooksInRange.endDate).toLocaleDateString()}</p>
        <h3 className="text-lg font-semibold mt-4 mb-2">Issued Books:</h3>
        <ul>
        {issuedBooksInRange.issuedBooks.map((book, index) => (
            <li key={index} className="mb-2">
            {/*@ts-ignore*/}
            <strong>{book.bookName}</strong> - User ID: {book.userId._id}
            </li>
        ))}
        </ul>
    </div>
)}
        
    </div>

)}
async function searchTransactionsByBookResponse(term: string) {
    try {
        const response = await axios.get(`${backendURL}/api/v1/transactions/book/${encodeURIComponent(term)}`);
        console.log(response.data);
        return response.data;
    } catch (error) {
        console.error('error fetching books', error);
        return [];
    }
}

async function totalRentGenerated(term: string) {
    try {
        const response = await axios.get(`${backendURL}/api/v1/transactions/rent/${encodeURIComponent(term)}`);
        console.log(response.data);
        return response.data;
    } catch (error) {
        console.error('error fetching books', error);
        return [];
    }
}

async function booksIssuedByUserid(userid: string) {
    try {
        const response = await axios.get(`${backendURL}/api/v1/transactions/user-books/${encodeURIComponent(userid)}`);
        console.log(response.data);
        return response.data;
    } catch (error) {
        console.error('error fetching books', error);
        return [];
    }
}

async function booksIssuedByDateRange(startDate:string,endDate:string) {
    try {
        const response = await axios.get(`${backendURL}/api/v1/transactions/issued-books/${encodeURIComponent(startDate)}/${encodeURIComponent(endDate)}`);
        console.log(response.data);
        return response.data;
    } catch (error) {
        console.error('error fetching books', error);
        return [];
    }
}